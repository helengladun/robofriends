{"version":3,"sources":["modules/shared/components/ErrorBoundary.tsx","modules/search/components/SearchBox.tsx","modules/shared/components/Spinner.tsx","modules/shared/components/Scroll.tsx","modules/shared/components/Header.tsx","modules/robots/components/Card.tsx","modules/robots/components/CardList.tsx","modules/search/store/types.ts","modules/search/store/actions.ts","modules/robots/store/types.ts","modules/robots/store/actions.ts","App.tsx","registerServiceWorker.js","modules/robots/store/reducers.ts","modules/search/store/reducers.ts","store/rootReducer.ts","modules/shared/services/Robot.ts","modules/robots/store/saga.ts","index.tsx","store/index.ts"],"names":["ErrorBoundary","state","hasError","error","errorInfo","this","setState","props","children","Component","SearchBox","onChangeHandler","className","aria-labelledby","type","placeholder","onChange","event","target","value","whyDidYouRender","Spinner","Scroll","Header","console","log","React","memo","Card","data","id","name","email","src","alt","SearchTypes","CardList","robots","map","robot","key","RobotsTypes","App","dispatch","useDispatch","useSelector","robotsList","searchField","loading","search","useState","searchResult","setSearchResults","useEffect","REQUEST_ROBOTS","results","filter","toLowerCase","length","debounce","text","CHANGE_SEARCH_FIELD","payload","setSearchField","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","initialState","rootReducer","combineReducers","action","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","Robot","axios","get","getRobotsSaga","watchGetRobotAsync","rootSaga","call","getRobot","response","put","message","takeEvery","all","store","sagaMiddleware","createSagaMiddleware","createLogger","createStore","applyMiddleware","run","configureStore","require","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9f1ae706.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\nclass ErrorBoundary extends Component {\n  state = {\n    hasError: false\n  };\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {\n    this.setState(() => ({\n      hasError: true\n    }))\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooops. That is not good</h1>\n    }\n\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary","import React, { ChangeEvent } from 'react';\n\ninterface IProps {\n    onChangeHandler: Function\n}\n\nconst SearchBox = ({onChangeHandler}: IProps) => (\n  <div className=\"pa2\">\n    <input\n      aria-labelledby=\"search robots\"\n      className=\"pa3 ba b--green bg-lightest-blue\"\n      type=\"search\"\n      placeholder=\"search robots\"\n      onChange={(event: ChangeEvent<HTMLInputElement>) => onChangeHandler(event.target.value)}\n    />\n  </div>\n);\n\nexport default SearchBox\nSearchBox.whyDidYouRender = true;","import React from 'react'\n\nexport const Spinner = () => (\n  <div className=\"full-screen flex justify-center items-center\">\n    <div className=\"pacman\">\n      <div className=\"pacman__mouth\"></div>\n      <div className=\"pacman__food\"></div>\n      <div className=\"pacman__food\"></div>\n      <div className=\"pacman__food\"></div>\n      <div className=\"pacman__food\"></div>\n    </div>\n  </div>\n);\n\nSpinner.whyDidYouRender = true;","import React from 'react';\n\ninterface IProps {\n}\n\nconst Scroll = (props: React.PropsWithChildren<IProps>) => {\n  return (\n    <div className=\"overflow-y-scroll ba bw3 scroll\">\n      {props.children}\n    </div>\n  )\n};\n\nexport default Scroll\n\nScroll.whyDidYouRender = true;","import React from 'react';\n\nconst Header = () => (\n  <h1 className=\"main-title f1\">RoboFriends {console.log('header')}</h1>\n);\n\nexport default React.memo(Header)\nHeader.whyDidYouRender = true;","import React from 'react'\n\n// interfaces\nimport { IRobot } from '../../shared/models/IRobot';\n\ninterface IProps {\n  data: IRobot\n}\n\nconst Card = ({data: {id, name, email}}: IProps) => (\n  <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n    <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robot\" />\n    <div>\n      <h2>{name}</h2>\n      <p>{email}</p>\n    </div>\n  </div>\n);\n\nexport default React.memo(Card);\nCard.whyDidYouRender = true;","import React from 'react';\n\n// components\nimport Card from \"./Card\";\n\n// interfaces\nimport {IRobot} from '../../shared/models/IRobot'\n\ninterface IProps {\n  robots: IRobot[]\n}\n\nconst CardList = ({robots}: IProps) => (\n  <div>\n    {console.log('cardlist')}\n    {robots.map(robot => <Card key={robot.id} data={robot} />)}\n  </div>\n);\n\nexport default CardList;\nCardList.whyDidYouRender = true;\n","export enum SearchTypes {\n  CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\n}","import { SearchTypes } from \"./types\";\n\nexport const setSearchField = (text: string) => ({\n  type: SearchTypes.CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\n","export enum RobotsTypes {\n  REQUEST_ROBOTS = 'REQUEST_ROBOTS',\n  REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS',\n  REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'\n}","// types\nimport { RobotsTypes } from \"./types\";\n\n//interfaces\nimport {IRobot} from \"../../shared/models/IRobot\";\n\nexport const requestRobots = () => ({\n  type: RobotsTypes.REQUEST_ROBOTS\n});\n\nexport const requestRobotsSuccess = (data: IRobot[]) => ({\n  type: RobotsTypes.REQUEST_ROBOTS_SUCCESS,\n  payload: {\n    data\n  }\n});\n\nexport const requestRobotsFailed = (error: string) => ({\n  type: RobotsTypes.REQUEST_ROBOTS_FAILED,\n  payload: {\n    error\n  }\n});\n\n","import React, {useEffect, useState} from 'react'\nimport debounce from 'lodash/debounce'\nimport {useDispatch, useSelector} from 'react-redux'\n\n// components\nimport ErrorBoundary from './modules/shared/components/ErrorBoundary';\nimport SearchBox from './modules/search/components/SearchBox'\nimport {Spinner} from './modules/shared/components/Spinner';\nimport Scroll from './modules/shared/components/Scroll'\nimport Header from './modules/shared/components/Header'\nimport CardList from \"./modules/robots/components/CardList\";\n\n// interfaces\nimport {IRobot} from \"./modules/shared/models/IRobot\";\n\n// actions\nimport {setSearchField} from \"./modules/search/store/actions\";\nimport {requestRobots} from \"./modules/robots/store/actions\";\n\n// reducers\nimport {IRobotsState} from \"./modules/robots/store/reducers\";\nimport {ISearchState} from \"./modules/search/store/reducers\";\nimport {ApplicationState} from './store/rootReducer';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const {robotsList, error, loading}: IRobotsState = useSelector((state: ApplicationState) => state.robots);\n  const {searchField}: ISearchState = useSelector((state: ApplicationState) => state.search);\n\n  const [searchResult, setSearchResults] = useState<IRobot[]>([]);\n\n  const onChangeHandler = (text: string) => {\n    dispatch(setSearchField(text));\n  };\n\n  useEffect(() => {\n    dispatch(requestRobots());\n  }, [dispatch]);\n\n  useEffect(() => {\n    const results = robotsList.filter(\n      (robot: IRobot) => robot.name.toLowerCase().search(searchField.toLowerCase()) > -1);\n    setSearchResults(results)\n  }, [searchField, robotsList]);\n\n  if (!robotsList?.length) {\n    return <Spinner />\n  }\n\n  return (\n    <div className=\"tc red\">\n      <Header />\n      <SearchBox onChangeHandler={debounce(onChangeHandler, 500)}/>\n      {error && <div className=\"red\">{error}</div>}\n      {robotsList && robotsList.length > 0 &&\n        <Scroll>\n          <ErrorBoundary>\n            { searchField === '' ? <CardList robots={robotsList} /> : <CardList robots={searchResult} /> }\n          </ErrorBoundary>\n        </Scroll>\n      }\n    </div>\n  )\n};\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { AnyAction, Reducer } from \"redux\";\n\n// types\nimport { RobotsTypes } from \"./types\";\n\n// interfaces\nimport {IRobot} from \"../../shared/models/IRobot\";\n\nexport interface IRobotsState {\n  robotsList: IRobot[],\n  loading: boolean,\n  error: string\n}\n\nconst initialState: IRobotsState = {\n  robotsList: [],\n  loading: false,\n  error: ''\n};\n\nexport const reducer: Reducer<IRobotsState> = (state: IRobotsState = initialState, action: AnyAction) => {\n  switch(action.type) {\n    case RobotsTypes.REQUEST_ROBOTS:\n      return {\n        ...state,\n        loading: true\n      };\n    case RobotsTypes.REQUEST_ROBOTS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        robotsList: action.payload.data\n      };\n    case RobotsTypes.REQUEST_ROBOTS_FAILED:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload.error\n      };\n    default:\n      return state;\n  }\n\n};","import { AnyAction, Reducer } from \"redux\";\n\n// types\nimport { SearchTypes } from \"./types\";\n\nexport interface ISearchState {\n  searchField: string\n}\n\nconst initialState: ISearchState = {\n  searchField: ''\n};\n\nexport const reducer: Reducer<ISearchState> = (state: ISearchState = initialState, action: AnyAction) => {\n  switch(action.type) {\n    case SearchTypes.CHANGE_SEARCH_FIELD:\n      return {\n        ...state,\n        searchField: action.payload\n      };\n    default:\n      return state;\n  }\n\n};","import { combineReducers } from 'redux'\n\nimport {IRobotsState, reducer as robotsReducer} from \"../modules/robots/store/reducers\";\nimport {ISearchState, reducer as SearchReducer} from \"../modules/search/store/reducers\";\n\nexport interface ApplicationState {\n  robots: IRobotsState,\n  search: ISearchState\n}\n\nexport const rootReducer = combineReducers<ApplicationState>({robots: robotsReducer, search: SearchReducer});\n","import axios from 'axios';\n\nexport class Robot {\n  static getRobot() {\n    return axios.get('https://jsonplaceholder.typicode.com/users');\n  }\n}\n","import { takeEvery, call, all, put } from 'redux-saga/effects'\n\n// actions\nimport {requestRobotsSuccess, requestRobotsFailed} from \"./actions\";\n\n// services\nimport {Robot} from '../../shared/services/Robot';\n\n// types\nimport {RobotsTypes} from \"./types\";\n\nexport function* getRobotsSaga() {\n  try {\n    const response = yield call(Robot.getRobot);\n    yield put(requestRobotsSuccess(response.data));\n  } catch (e) {\n    yield put(requestRobotsFailed(e.message));\n  }\n}\n\nfunction* watchGetRobotAsync() {\n  yield takeEvery(RobotsTypes.REQUEST_ROBOTS, getRobotsSaga)\n}\n\nexport default function* rootSaga() {\n  yield all([\n    watchGetRobotAsync()\n  ])\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'tachyons';\n\n// components\nimport App from './App'\n\n// styles\nimport \"./index.scss\";\n\n// utils\nimport registerServiceWorker from './registerServiceWorker'\n\n// store\nimport {configureStore} from \"./store\";\n\nconst store = configureStore();\n\nconst whyDidYouRender = require('@welldone-software/why-did-you-render');\nwhyDidYouRender(React);\n\nReactDOM.render(\n  <Provider store={store}>\n    <div className=\"full-screen\">\n      <App />\n    </div>\n  </Provider>,\n  document.getElementById('root'));\n\nregisterServiceWorker();","import { createStore, applyMiddleware, Store } from 'redux';\nimport createSagaMiddleware from 'redux-saga'\n\nimport {ApplicationState, rootReducer} from './rootReducer';\nimport {createLogger} from \"redux-logger\";\nimport rootSaga from \"../modules/robots/store/saga\";\n\nexport function configureStore(): Store<ApplicationState> {\n  const sagaMiddleware = createSagaMiddleware();\n  const logger = createLogger();\n\n  const store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\n\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n}\n\n"],"sourceRoot":""}