{"version":3,"sources":["components/ErrorBoundary.tsx","components/SearchBox.tsx","components/Spinner.tsx","components/Scroll.tsx","App.tsx","registerServiceWorker.js","index.tsx"],"names":["ErrorBoundary","state","hasError","error","errorInfo","this","setState","props","children","Component","SearchBox","onChangeHandler","className","type","placeholder","onChange","event","target","value","Spinner","Scroll","CardList","React","lazy","App","useState","searchText","changeSearchText","robotsList","setRobotsList","useEffect","fetch","then","response","json","users","fallback","debounce","text","length","robots","filter","robot","name","toLowerCase","search","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"oRAsBeA,E,2MAnBbC,MAAQ,CACNC,UAAU,G,iFAGMC,EAAcC,GAC9BC,KAAKC,UAAS,iBAAO,CACnBJ,UAAU,Q,+BAKZ,OAAIG,KAAKJ,MAAMC,SACN,uDAGFG,KAAKE,MAAMC,a,GAhBMC,aCebC,EAXG,SAAC,GAAD,IAAEC,EAAF,EAAEA,gBAAF,OAChB,yBAAKC,UAAU,OACb,2BACEA,UAAU,mCACVC,KAAK,SACLC,YAAY,gBACZC,SAAU,SAACC,GAAD,OAA0CL,EAAgBK,EAAMC,OAAOC,YCV1EC,EAAU,kBACrB,yBAAKP,UAAU,oCACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,kBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,oBCINQ,EARA,SAACb,GACd,OACE,yBAAKK,UAAU,mCACZL,EAAMC,WCIPa,EAAWC,IAAMC,MAAK,kBAAM,gCA2CnBC,EAzCH,WAAO,IAAD,EACuBC,mBAAS,IADhC,mBACTC,EADS,KACGC,EADH,OAEoBF,mBAAS,IAF7B,mBAETG,EAFS,KAEGC,EAFH,KAQhBC,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAIN,EAAcM,QAC9B,IAYH,OACE,kBAAC,WAAD,CAAUC,SAAU,yBAAKxB,UAAU,eAAc,kBAAC,EAAD,QAC/C,yBAAKA,UAAU,MACb,wBAAIA,UAAU,iBAAd,eACA,kBAAC,EAAD,CAAWD,gBAAiB0B,KAxBV,SAACC,GACvBX,EAAiBW,KAuByC,QAC3C,OAAVV,QAAU,IAAVA,OAAA,EAAAA,EAAYW,QAAS,GACpB,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAClB,EAAD,CAAUmB,OAlBEZ,EACnBa,QACC,SAACC,GAAD,OACEA,EACGC,KACAC,cACAC,OAAOnB,EAAWkB,gBAAkB,YCxB3CE,G,MAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTrB,MAAK,SAAAyB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB1D,QACfqD,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAA9D,GACL4D,QAAQ5D,MAAM,4CAA6CA,MCzDjE+D,IAASC,OACP,yBAAKvD,UAAU,eAAc,kBAAC,EAAD,OAC7BwD,SAASC,eAAe,SDKX,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,eAAwBvB,OAAOC,UAC3CuB,SAAWxB,OAAOC,SAASuB,OAIvC,OAGFxB,OAAOyB,iBAAiB,QAAQ,WAC9B,IAAMpB,EAAK,UAAMkB,eAAN,sBAEPzB,EAwCV,SAAiCO,GAE/BtB,MAAMsB,GACHrB,MAAK,SAAAC,GAGkB,MAApBA,EAASyC,SACuD,IAAhEzC,EAAS0C,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CvB,UAAUC,cAAcuB,MAAM9C,MAAK,SAAAyB,GACjCA,EAAasB,aAAa/C,MAAK,WAC7BgB,OAAOC,SAAS+B,eAKpB5B,EAAgBC,MAGnBY,OAAM,WACLF,QAAQC,IACN,oEA5DAiB,CAAwB5B,GAGxBD,EAAgBC,OCvBxB6B,K","file":"static/js/main.b7553e6d.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\nclass ErrorBoundary extends Component {\n  state = {\n    hasError: false\n  };\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {\n    this.setState(() => ({\n      hasError: true\n    }))\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooops. That is not good</h1>\n    }\n\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary","import React, { ChangeEvent } from 'react';\n\ninterface IProps {\n    onChangeHandler: Function\n}\n\nconst SearchBox = ({onChangeHandler}: IProps) => (\n  <div className=\"pa2\">\n    <input\n      className=\"pa3 ba b--green bg-lightest-blue\"\n      type=\"search\"\n      placeholder=\"search robots\"\n      onChange={(event: ChangeEvent<HTMLInputElement>) => onChangeHandler(event.target.value)}\n    />\n  </div>\n);\n\nexport default SearchBox","import React from 'react'\n\nexport const Spinner = () => (\n  <div className=\"flex justify-center items-center\">\n    <div className=\"pacman\">\n      <div className=\"pacman__mouth\"></div>\n      <div className=\"pacman__food\"></div>\n      <div className=\"pacman__food\"></div>\n      <div className=\"pacman__food\"></div>\n      <div className=\"pacman__food\"></div>\n    </div>\n  </div>\n);","import React from 'react';\n\ninterface IProps {\n}\n\nconst Scroll = (props: React.PropsWithChildren<IProps>) => {\n  return (\n    <div className=\"overflow-y-scroll ba bw3 scroll\">\n      {props.children}\n    </div>\n  )\n};\n\nexport default Scroll","import React, {Suspense, useState, useEffect} from 'react'\nimport debounce from 'lodash/debounce'\n\n// components\nimport ErrorBoundary from \"./components/ErrorBoundary\";\nimport SearchBox from './components/SearchBox'\nimport {Spinner} from './components/Spinner';\nimport Scroll from './components/Scroll'\n\n// interfaces\nimport {IRobot} from \"./interfaces/IRobot\";\n\nconst CardList = React.lazy(() => import('./components/CardList'));\n\nconst App = () => {\n  const [searchText, changeSearchText] = useState('');\n  const [robotsList, setRobotsList] = useState([]);\n\n  const onChangeHandler = (text: string) => {\n    changeSearchText(text);\n  };\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => setRobotsList(users));\n  }, []);\n\n  const getRobots = () => robotsList\n      .filter(\n        (robot: IRobot) =>\n          robot\n            .name\n            .toLowerCase()\n            .search(searchText.toLowerCase()) > -1\n      )\n  ;\n\n  return (\n    <Suspense fallback={<div className=\"full-screen\"><Spinner /></div>}>\n      <div className=\"tc\">\n        <h1 className=\"main-title f1\">RoboFriends</h1>\n        <SearchBox onChangeHandler={debounce(onChangeHandler, 500)}/>\n        {robotsList?.length > 0 &&\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={getRobots()} />\n            </ErrorBoundary>\n          </Scroll>\n        }\n      </div>\n    </Suspense>\n  )\n};\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons';\n\n// components\nimport App from './App'\n\n// styles\nimport \"./index.scss\";\n\n// utils\nimport registerServiceWorker from './registerServiceWorker'\n\nReactDOM.render(\n  <div className=\"full-screen\"><App /></div>,\n  document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}